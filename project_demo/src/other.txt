int num_bullets = 7; // ví dụ
float spread = 40.0f;                 // tổng góc lan
float base_angle = 180.0f - spread / 2;  // 160 độ: hơi chếch lên-trái

for (int i = 0; i < num_bullets; ++i)
{
    float angle = base_angle + (spread * i / (num_bullets - 1));
    float rad = angle * M_PI / 180.0f;

    float vx = cos(rad) * bullet_speed; // vx < 0
    float vy = sin(rad) * bullet_speed;

    bullets.push_back(Bullet(x + w / 2, y + h / 2, vx, vy, bullet_damage));
}


void Game_Playing::add_item_to_game(Texture* texture,
                                     float x, float y, float w, float h,
                                     ITEM_EFFECT effect, ITEM_TRIGGER trigger,
                                     Uint32 delay, int level, int enemy_count, int boss_defeated)
{
    // Tạo item dựa trên hiệu ứng
    Item* new_item = nullptr;
    
    switch (effect)
    {
        case ITEM_EFFECT::BUFF:
            new_item = new Buff_Player_Item(texture, x, y, w, h, effect, trigger, delay, level, enemy_count, boss_defeated);
            break;
        case ITEM_EFFECT::SHIELD:
            new_item = new Shield_Item(texture, x, y, w, h, effect, trigger, delay, level, enemy_count, boss_defeated);
            break;
        case ITEM_EFFECT::EXP:
            new_item = new Exp_Item(texture, x, y, w, h, effect, trigger, delay, level, enemy_count, boss_defeated);
            break;
        default:
            SDL_Log(">>> Unknown ITEM_EFFECT type!");
            return;
    }

    // Thêm item vào vector items
    items.push_back(new_item);
    new_item->ready(*this);  // Kiểm tra và kích hoạt item nếu đủ điều kiện
}

for (auto& item : items)
{
    if (item->active() && check_collision(player, *item))
    {
        item->update(game); // DONE!
    }

    item->render(renderer);
}
